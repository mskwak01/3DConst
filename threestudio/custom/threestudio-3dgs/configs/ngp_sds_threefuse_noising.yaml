name: "ngp_sds_threefuse_noising"
tag: "${rmspace:${system.prompt_processor.prompt},_}_${system.tag}"
exp_root_dir: "outputs"
seed: 0

data_type: "random-multiview-datamodule"
data:
  batch_size: 2
  width: 512
  height: 512
  camera_distance_range: [1.4, 1.4]
  fovy_range: [60, 70]
  elevation_range: [0, 90]
  light_sample_strategy: "dreamfusion"
  eval_camera_distance: 1.4
  eval_fovy_deg: 70
  rays_d_normalize: false
  num_multiview: 2
  multiview_deg: 30.0

system_type: "dreamfusion-system"
system:
  geometry_type: "implicit-volume"
  geometry:
    radius: 2.0
    normal_type: "analytic"

    # the density initialization proposed in the DreamFusion paper
    # does not work very well
    # density_bias: "blob_dreamfusion"
    # density_activation: exp
    # density_blob_scale: 5.
    # density_blob_std: 0.2

    # use Magic3D density initialization instead
    density_bias: "blob_magic3d"
    density_activation: softplus
    density_blob_scale: 10.
    density_blob_std: 0.5

    # coarse to fine hash grid encoding
    # to ensure smooth analytic normals
    pos_encoding_config:
      otype: ProgressiveBandHashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096
      start_level: 8 # resolution ~200
      start_step: 2000
      update_steps: 500

  material_type: "diffuse-with-point-light-material"
  material:
    ambient_only_steps: 2001
    albedo_activation: sigmoid

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid

  renderer_type: "nerf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 512

  prompt_processor_type: "stable-diffusion-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    prompt: ???

  guidance_type: "stable-diffusion-guidance"
  guidance:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    guidance_scale: 100.
    weighting_strategy: sds
    min_step_percent: 0.02
    max_step_percent: 0.98

  loggers:
    wandb:
      enable: false
      project: "threestudio"
      name: None

  loss:
    lambda_sds: 1.
    lambda_orient: [0, 10., 1000., 5000]
    lambda_sparsity: 1.
    lambda_opaque: 0.
  optimizer:
    name: Adam
    args:
      lr: 0.01
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01
      background:
        lr: 0.001

trainer:
  max_steps: 10000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 200
  enable_progress_bar: true
  precision: 16-mixed

checkpoint:
  save_last: true # save at each validation time
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}


# system_type: "dreamfusion-sds-system"
# system:
#   stage: coarse
#   image_dir: "/home/dreamer/host_files/matthew/matt_threestudio/threestudio/tower.png"
#   threefuse: true
#   three_noise: true
#   identical_noising: true
#   calibration_value: 0
#   geometry_type: "implicit-volume"
#   geometry:
#     radius: 1.0
#     normal_type: null

#     density_bias: "blob_magic3d"
#     density_activation: softplus
#     density_blob_scale: 10.
#     density_blob_std: 0.5

#     # coarse to fine hash grid encoding
#     # to ensure smooth analytic normals
#     pos_encoding_config:
#       otype: HashGrid
#       n_levels: 8
#       n_features_per_level: 2
#       log2_hashmap_size: 19
#       base_resolution: 8
#       per_level_scale: 1.447269237440378 # max resolution 4096

#   material_type: "no-material"
#   material:
#     n_output_dims: 3
#     color_activation: sigmoid

#   background_type: "neural-environment-map-background"
#   background:
#     color_activation: sigmoid
#     random_aug: true

#   renderer_type: "nerf-volume-renderer"
#   renderer:
#     radius: ${system.geometry.radius}
#     num_samples_per_ray: 512

#   prompt_processor_type: "stable-diffusion-prompt-processor"
#   prompt_processor:
#     pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
#     prompt: ???

#   guidance_type: "stable-diffusion-guidance"
#   guidance:
#     pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
#     guidance_scale: 100.
#     weighting_strategy: sds
#     min_step_percent: 0.02
#     max_step_percent: 0.98

#   # prompt_processor_type: "stable-diffusion-prompt-processor"
#   # prompt_processor:
#   #   pretrained_model_name_or_path: "runwayml/stable-diffusion-v1-5"
#   #   pretrained_model_name_or_path_aux: "stabilityai/stable-diffusion-2-1"
#   #   prompt: ???
#   #   front_threshold: 30.
#   #   back_threshold: 30.
#   #   multiple_encoders: true

#   # guidance_type: "threefuse-guidance"
#   # guidance:
#   #   pretrained_model_name_or_path: "/mnt/data3/ines/threestudio/controlnet"
#   #   guidance_scale: 100.0
#   #   weighting_strategy: sds
#   #   min_step_percent: 0.02
#   #   max_step_percent: [1000, 0.98, 0.5, 1001]

#   loggers:
#     wandb:
#       enable: false
#       project: "threestudio"
#       name: None

#   # loss:
#   #   lambda_sds: 0.1
#   #   lambda_position: 1.0
#   #   lambda_opacity: 0.0001
#   #   lambda_scales: 0.0001
#   #   lambda_tv_loss: 1.0
#   #   lambda_depth_tv_loss: 1.0

#   loss:
#     lambda_sds: 1.
#     lambda_orient: [0, 10., 1000., 5000]
#     lambda_sparsity: 1.
#     lambda_opaque: 0.
#   optimizer:
#     name: Adam
#     args:
#       lr: 0.01
#       betas: [0.9, 0.99]
#       eps: 1.e-15
#     params:
#       geometry:
#         lr: 0.01
#       background:
#         lr: 0.001 

#   # optimizer:
#   #   name: AdamW
#   #   args:
#   #     betas: [0.9, 0.99]
#   #     eps: 1.e-15
#   #   params:
#   #     geometry.encoding:
#   #       lr: 0.01
#   #     geometry.density_network:
#   #       lr: 0.001
#   #     geometry.feature_network:
#   #       lr: 0.001
#   #     background:
#   #       lr: 0.001
#   #     guidance:
#   #       lr: 0.0001

# trainer:
#   max_steps: 5000
#   log_every_n_steps: 1
#   num_sanity_val_steps: 0
#   val_check_interval: 2
#   enable_progress_bar: true
#   precision: 32-true
#   # deterministic: true

# checkpoint:
#   save_last: true # save at each validation time
#   save_top_k: -1
#   every_n_train_steps: ${trainer.max_steps}
